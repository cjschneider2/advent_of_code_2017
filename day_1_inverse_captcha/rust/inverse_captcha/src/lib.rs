pub fn inverse_captcha(input: &str) -> u32 {
    let digits: Vec<u32> = input.chars().map(|c| c.to_digit(10).unwrap() ).collect();
    let first: u32 = *(digits.first().unwrap());
    let mut sum = 0;
    let mut iter = digits.iter().peekable();
    while let Some(digit) = iter.next() {
        if let Some(next) = iter.peek() {
            if *digit == **next {
                sum += *digit;
            }
        } else {
            // we are at the last digit so we'll check it with the first digit.
            if *digit == first {
                sum += *digit;
            }
        }
    }
    sum
}

pub fn inverse_captcha_part_2(input: &str) -> u32 {
    let digits: Vec<u32> = input.chars().map(|c| c.to_digit(10).unwrap() ).collect();
    let size = digits.len();
    let step_size = size / 2;
    let mut sum = 0;
    for idx in 0..digits.len() {
        let digit = digits[idx];
        let idh = {
            let mut i = idx + step_size;
            if i >= size {
                i -= size;
            }
            i
        };
        let half = digits[idh];
        if digit == half {
            sum += digit;
        }
    }
    sum
}

#[cfg(test)]
mod tests {
    use super::*;

    fn input() -> &'static str {
        "21752342814933766938172121674976879111362417653261\
         52235785581689365646244916837735928524481848972386998786\
         12479122897295792966916847611435449569915839422152365689\
         61875851755854977946147178746464675227699149925227227137\
         55747976994856978888439937982111138253672269957575947447\
         32739397563489927146679635961897657347431694895991257714\
         43348193383566159843593541134749392569865481578359825844\
         39445417321985791934934144214828222968954156116934162222\
         23546513973429286784964786713393839237698564257952113236\
         73389723181967933933832711545885653952861879231537976292\
         51786635481294319272826326952473569842333667373515899385\
         35561488338613279592622547566478277391452835777934815267\
         68156921138428318939361859721778556264519643435871835744\
         85924316722788956273871295365112831762467398521352589752\
         23782591786254167221521557286159365873695152549368286685\
         64857283226439881266871945998796488472249182538883354186\
         57392518315266386268399544967166328577539745387626272256\
         74524359147773635228175947419466389865717936558894664198\
         95996924122915777224499481496837343194149123735355268151\
         94171287124586355383695334988783194978886985292914784948\
         92653258439346699993918462863192686867893725139765222825\
         87526866148166337215961493536262851512218794139272361292\
         81152988816119879929796689336655311535363929825678881938\
         52724711872135791855235213416511179476767853411462354414\
         11441813242514813227821843819424619974979886871646621918\
         86527457453895176156785584568127236464613858471633359984\
         38351673735252485475424429425831226245344944425162596169\
         73235858469131159773167334953658673271599748942956981954\
         69944452868962884869444681882546548512286974283971147112\
         98626321286357796583657563628636271359836176133328497563\
         71986376967117549251566281992964573929655589313871976556\
         78484923191651383153825481234711625394981863352718517422\
         15652797757667422626877131141143448435349588333726341821\
         76866315441583887177759222598853735114191874277711434653\
         85481684158922991416468136449742932446319366933782746766\
         17738335178417637111563761476647491752672125623215677285\
         75765844893232718971471289841171642868948852136818661741\
         23817867685738158315554775521983711612599536189656249872\
         1571413742"
    }

    /*
    Part 1
    */

    #[test]
    fn ex_1122 () {
        let input = "1122";
        let res = inverse_captcha(input);
        assert_eq!(res, 3);
    }

    #[test]
    fn ex_1111 () {
        let input = "1111";
        let res = inverse_captcha(input);
        assert_eq!(res, 4);
    }

    #[test]
    fn ex_1234 () {
        let input = "1234";
        let res = inverse_captcha(input);
        assert_eq!(res, 0);
    }

    #[test]
    fn ex_91212129 () {
        let input = "91212129";
        let res = inverse_captcha(input);
        assert_eq!(res, 9);
    }

    #[test]
    fn test_input_part_1 () {
        let res = inverse_captcha(input());
        assert_eq!(res, 1119);
    }

    /*
    Part 1
    */

    #[test]
    fn ex_1212_part_2() {
        let input = "1212";
        let res = inverse_captcha_part_2(input);
        assert_eq!(res, 6);
    }

    #[test]
    fn ex_1221_part_2() {
        let input = "1221";
        let res = inverse_captcha_part_2(input);
        assert_eq!(res, 0);
    }

    #[test]
    fn ex_123425_part_2() {
        let input = "123425";
        let res = inverse_captcha_part_2(input);
        assert_eq!(res, 4);
    }

    #[test]
    fn ex_123123_part_2() {
        let input = "123123";
        let res = inverse_captcha_part_2(input);
        assert_eq!(res, 12);
    }

    #[test]
    fn ex_12131415_part_2() {
        let input = "12131415";
        let res = inverse_captcha_part_2(input);
        assert_eq!(res, 4);
    }

    #[test]
    fn test_input_part_2() {
        let res = inverse_captcha_part_2(input());
        assert_eq!(res, 1420);
    }
}
